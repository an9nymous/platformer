
*Impostazione dei file: Il codice inizia creando una cartella per contenere tutti i file del gioco. Vengono creati un file HTML (index.html) 
con un elemento canvas vuoto, un file CSS (style.css) per gestire lo stile del canvas e una cartella "scripts" per contenere i file JavaScript. 
L'HTML include i riferimenti al file CSS e ai file JavaScript.

*Disegno di rettangoli: Viene recuperato il contesto di rendering 2D del canvas per poter disegnare su di esso. Inizialmente, 
viene disegnato un semplice rettangolo rosso come prova.

*Creazione di oggetti di gioco: Viene definita una classe GameObject che rappresenta un oggetto di base nel gioco. Ogni oggetto di gioco ha una
posizione, una scala, un colore, una velocità, una proprietà "solido" che indica se è un oggetto attraversabile o meno, e dei metodi per la gestione
degli aggiornamenti e delle collisioni. Vengono anche definite due classi derivate: Player (per il personaggio controllato dal giocatore) e Block.

*Gestione degli input: Viene creato un oggetto controls che tiene traccia dello stato dei tasti premuti (su, giù, sinistra, destra). Vengono aggiunti 
event listener per gli eventi keydown e keyup che aggiornano lo stato dei tasti corrispondenti nell'oggetto controls.

*Movimento e fisica: Viene implementata la fisica del movimento per gli oggetti di gioco. Ogni oggetto ha una proprietà velocity (velocità) che determina 
quanto si sposta ad ogni frame. Viene aggiunta la gravità, che fa cadere gli oggetti verso il basso a meno che non siano appoggiati su una piattaforma solida. 
Per il giocatore, vengono implementati il movimento laterale e il salto.

*Collisioni: Viene implementata la gestione delle collisioni tra gli oggetti di gioco solidi. Quando due oggetti solidi si scontrano, il movimento viene bloccato 
in modo che non possano attraversarsi a vicenda. La direzione del blocco (orizzontale o verticale) dipende dalla direzione del minimo spostamento necessario per separarli.

*Fotogrammi e animazione: Viene utilizzata la funzione requestAnimationFrame per creare un ciclo di animazione. Ad ogni frame, viene calcolato il tempo trascorso dall'ultimo 
frame (deltaTime) e viene utilizzato per aggiornare la posizione degli oggetti in base alla loro velocità. Ogni oggetto ha un metodo onUpdate che viene chiamato ad ogni frame 
per gestire gli aggiornamenti specifici dell'oggetto (ad esempio, il movimento del giocatore).

*Telecamera: Viene introdotto un oggetto Camera che segue il giocatore. La posizione della telecamera viene utilizzata per disegnare gli oggetti di gioco in modo che il giocatore 
sia sempre al centro dello schermo. La telecamera ha una proprietà followPercentage che controlla quanto velocemente si muove per seguire il giocatore

*Nemici e distruzione: Viene introdotto un nuovo tipo di oggetto di gioco chiamato Enemy. Gli oggetti nemici hanno una proprietà damage che indica che possono distruggere il giocatore 
in caso di collisione. Quando il giocatore collide con un nemico, viene impostata una proprietà destroy su true. Alla fine di ogni frame, tutti gli oggetti con la proprietà destroy 
impostata su true vengono rimossi dall'array gameObjects.

*Movimento dei nemici: I nemici hanno un comportamento di movimento semplice. Camminano in una direzione a velocità costante per un certo periodo di tempo, quindi invertono
la direzione e continuano a camminare nell'altra direzione.